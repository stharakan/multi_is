function [ franks ] = SelectFeatures( bdir,outdir,stype,psize,ftype,pstr,ppb,target )
%FEATURERANKERREGRESSION ranks the feature data generated by blist, ftype,
%and psize (combined with the ppvec generated by blist and psize) and
%outputs it in franks. There is no subsampling done here


% Add path to other code
prdir = [getenv('PRDIR'),'/'];
if isempty(outdir)
  outdir = [getenv('PRDIRSCRATCH'),'/'];
end
if isempty(bdir)
  bdir = [getenv('BRATSDIR'),'/preprocessed/trainingdata/meanrenorm/'];
end
addpath(bdir);
bcell = BrainCellAllTrain();
num_brains = length(bcell);
split_perc = 0.8;
num_trn_brains = num_brains*split_perc;

% initialize ps
if strcmp(pstr,'edemadist')
  ps = PointSelector(pstr,ppb,psize);
else
  ps = PointSelector(pstr,ppb);
end
fprintf('Point selector: %s\n',ps.PrintString());

% feature info
fprintf('Feature type: %s\n',ftype);

% start
disp('Loading blist');
blist = BrainPointList.LoadList(outdir,ps,num_trn_brains);
blist.PrintListInfo();

% how many runs? default 15
runs = 15;


% Get data (assume this is only training)
[ fmat,fcell ] = GetBlistPatchFeatureData( blist,psize,ftype,outdir );
fmat = sparse(fmat);

% Get outputs (assume only training)
ppvec = GetPatchProbabilities(blist,psize,target,outdir);

% Whiten training
fmat = whiten(fmat);


% set params
if strcmp(stype,'reg01')
  [params] = CrossValParamsReg01(blist,outdir,psize,target,ftype);
elseif strcmp(stype,'cla')
  [params] = CrossValParamsCla(blist,outdir,psize,target,ftype);

  % preprocess y 
  num_classes = 4;
  [~,~,ppvec] = BucketCounterNoEnds(ppvec,num_classes);
else
  error('stype unrecognized');
end


% set outdir, check for existing file
sfile = blist.MakeFRString(stype,ftype,psize,target,params);
if ~isempty(outdir) & exist([outdir,sfile],'file')
    fprintf('Found existing file, loading');
    sfile = [outdir,sfile];
    fid = fopen(sfile,'r');
    franks = fread(fid,Inf,'single');
    fclose(fid);
    
    % set up franks
    dd = length(blist.FeatureCell(ftype,psize));
    franks = reshape(franks,dd,[]);
    return
end

% loop over runs
feats = size(fmat,2);
franks = zeros(feats,runs,'single');
for ri = 1:runs
  % Run svmrfe
  if strcmp(stype,'reg01')
    [frank] = ftSel_SVMRFECBR_lin(fmat,ppvec,params);
  elseif strcmp(stype,'cla')
    [frank] = ftSel_SVMRFECBR_lin_cla(fmat,ppvec,params);
  end

  % add in
  franks(:,ri) = single(frank(:));

  if ~isempty(outdir)
    % save this file
    sfile = blist.MakeFRString(stype,ftype,psize,target,params);
    sfile = [outdir,sfile];
    
    fid = fopen(sfile,'w');
    fwrite(fid,franks(:,1:ri),'single');
    fclose(fid);
    
  end
end

if ~isempty(outdir)
    % save this file
    sfile = blist.MakeFRString(stype,ftype,psize,target,params);
    sfile = [outdir,sfile];
    
    fid = fopen(sfile,'w');
    fwrite(fid,franks,'single');
    fclose(fid);
    
end

% print output? maybe a table of averages    
[ftOrder,AvgPos] = DetermineFeatureOrder(franks);
Feature = fcell(ftOrder);
AvgPos = AvgPos(ftOrder);
tab = table(Feature(:),AvgPos(:))


end

